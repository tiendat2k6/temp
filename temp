Bai 1:

#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <cstring>
#include <climits>
#include <cstdlib>
#include <ctime>

#include <vector>
#include <set>
#include <bitset>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <unordered_map>

#pragma GCC optimize("Ofast")

using str = std::string;
using ull = unsigned long long;
using ii = std::pair <int, int>;

#define X first
#define Y second
#define endl '\n'
#define pb push_back
#define int long long
#define And << " " <<
#define len(x) (long long)x.length()
#define reset(a, x) memset(a, x, sizeof(a))
#define End cout << '\n' << "\n"; return 0;
#define Fu(i, l, r) for (int i = l; i <= r; i++)
#define enter_arr(x, n) Fu(i, 1, n) cin >> x[i];
#define File(x) freopen(x".INP", "r", stdin); freopen(x".OUT", "w", stdout);
#define Fast ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
using namespace std;

const int N = 1e2 + 5;

/*-------------// Variables \\--------------*/

/*------------------------------------------*/

void solve()
{
    int x1, x2, y1, y2;
    cin >> x1 >> y1 >> x2 >> y2;

    cout << __gcd(abs(x2-x1), abs(y2-y1)) - 1 << endl;
}

int32_t main()
{
    Fast;
     File("SDNGUYEN")
//     freopen("test.inp", "r", stdin);
     int t; cin >> t; while(t--)
        solve();
    End;
}


Bai 2:

#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <cstring>
#include <climits>
#include <cstdlib>
#include <ctime>

#include <vector>
#include <set>
#include <bitset>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <unordered_map>

#pragma GCC optimize("Ofast")

using str = std::string;
using ull = unsigned long long;
using ii = std::pair <int, int>;

#define X first
#define Y second
#define endl '\n'
#define pb push_back
#define int long long
#define And << " " <<
#define len(x) (long long)x.length()
#define reset(a, x) memset(a, x, sizeof(a))
#define End cout << '\n' << "\n"; return 0;
#define Fu(i, l, r) for (int i = l; i <= r; i++)
#define enter_arr(x, n) Fu(i, 1, n) cin >> x[i];
#define File(x) freopen(x".INP", "r", stdin); freopen(x".OUT", "w", stdout);
#define Fast ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
using namespace std;

const int N = 1e6 + 5;

/*-------------// Variables \\--------------*/
    int n, a[N];
    pair <int, int> ans;
/*------------------------------------------*/

void solve()
{
    cin >> n; enter_arr(a, n);

    int cur = 0;
    int l = 1, r = 1, sum = INT_MIN;

    for(int i = 1; i <= n; i++)
    {
        cur += a[i];

        if (cur > sum) sum = cur, ans = {l, r};
        if (cur < 0) cur = 0, l = i+1, r = i;

        r++;
    }

    cout << ans.X << endl << ans.Y << endl << sum;
}

int32_t main()
{
    Fast;
     File("SUBSEQ")
//     freopen("test.inp", "r", stdin);
    // int t; cin >> t; while(t--)
        solve();
    End;
}


Bai 3:

#include <bits/stdc++.h>

#pragma GCC optimize("Ofast")

using str = std::string;
using ull = unsigned long long;
using ii = std::pair <int, int>;

#define X first
#define Y second
#define endl '\n'
#define pb push_back
#define int long long
#define And << " " <<
#define len(x) (long long)x.length()
#define reset(a, x) memset(a, x, sizeof(a))
#define End cout << '\n' << "\n"; return 0;
#define Fu(i, l, r) for (int i = l; i <= r; i++)
#define enter_arr(x, n) Fu(i, 1, n) cin >> x[i];
#define File(x) freopen(x".INP", "r", stdin); freopen(x".OUT", "w", stdout);
#define Fast ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
using namespace std;

const int N = 1e2 + 5;

/*-------------// Variables \\--------------*/
    int n;
    string s, d[N];
/*------------------------------------------*/

string sum(string a, string b)
{
    int     du  = 0;
    int     mid = 0;
    string  res = "";
    a.insert(0ll, max(0ll, (int) (b.length() - a.length())), '0');
    b.insert(0ll, max(0ll, (int) (a.length() - b.length())), '0');
    for (int i = a.length()-1; i >= 0; --i)
    {
        mid = ((int) a[i] - 48) + ((int) b[i] - 48) + du;
        du  = mid / 10;
        res = (char) (mid % 10 + 48) + res;
    }
    if (du > 0) res = "1" + res;
    return res;
}

void solve()
{
    cin >> n >> s; s = ' ' + s;

    d[0] = "1";
    d[1] = ((s[1] == '1')? "1" : "0");

    for(int i = 2; i <= n; i++)
        d[i] = ((s[i] == '1')? sum(d[i-2], d[i-1]) : "0");

    cout << d[n];
}

int32_t main()
{
    Fast;
     File("FLIGHT2")
//     freopen("test.inp", "r", stdin);
    // int t; cin >> t; while(t--)
        solve();
    End;
}
