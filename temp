#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <cstring>
#include <climits>
#include <cstdlib>
#include <ctime>
 
#include <vector>
#include <set>
#include <bitset>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <unordered_map>

#pragma GCC optimize("O2")
 
using str = std::string;
using ull = unsigned long long;
using ii = std::pair <int, int>;
 
#define X first
#define Y second
#define endl '\n'
#define pb push_back
#define int long long
#define And << " " <<
#define len(x) (long long)x.length()
#define reset(a, x) memset(a, x, sizeof(a))
#define End cout << '\n' << "\n"; return 0;
#define Fu(i, l, r) for (int i = l; i <= r; i++)
#define enter_arr(x, n) Fu(i, 1, n) cin >> x[i];
#define File(x) freopen(x".INP", "r", stdin); freopen(x".OUT", "w", stdout);
#define Fast ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
using namespace std;

const int N = 1e5 + 5;

/*-------------// Variables \--------------*/
    int n, sum, cur, a[N];
    pair <int, int> d[N], nd[N];
/*------------------------------------------*/

void print(ii a) {
    cout << a.X And a.Y << endl; 
}

bool check(int id)
{
    if (id < 0 || nd[id].X == -1) return false;

    return (nd[id].X + nd[id].Y == cur);
}

void solve() 
{
    cin >> n; 

    for(int i = 1; i <= n; i++)
        cin >> a[i], sum += a[i];

    memset(d, -1, sizeof(d));
    d[0] = {0, 0};

    cur = 0;
    for(int i = 1; i <= n; i++) 
    {
        
        Fu(k, 0, 1000) nd[k] = d[k];

        int mx = -1;
        for(int j = 0; j <= 1000; j++)  // here
        {
            if (check(j - a[i])) {

                int x1 = nd[j-a[i]].X + a[i], y1 = nd[j-a[i]].Y;
                if (mx < x1 * y1) d[j] = {x1, y1}, mx = x1 * y1;

            }
            if (check(j + a[i])) 
            {
                int x2 = nd[j+a[i]].X, y2 = nd[j+a[i]].Y + a[i];
                if (mx < x2 * y2) d[j] = {x2, y2}, mx = x2 * y2;
            }

            if (check(a[i] - j))
            {
                    cout << a[i]-j << endl;
                int x2 = nd[a[i]-j].X, y2 = nd[a[i]-j].Y + a[i];
                if (mx < x2 * y2) d[j] = {x2, y2}, mx = x2 * y2;
            }

        }

            // print(d[17]); 
            // cout << mx << endl;

        cur += a[i];

            // cout << d[29].X And d[29].Y << endl;
    }

    for(int i = 0; i <= 1000; i++)
    {
        int x = d[i].X, y = d[i].Y;
        if (x == -1 || x + y != sum) continue;
        // if (x == -1) continue;

        // cout << min(x, y) And max(x, y);
        break;
    }

    // cout << d[1].X And d[1].Y;
}

int32_t main() 
{
    Fast;
    freopen("test.inp", "r", stdin);
    // int t; cin >> t; while(t--)
        solve();
    End;
}
// 18 29
// 23 24
